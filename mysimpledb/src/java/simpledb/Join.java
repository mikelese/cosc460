package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    
    private JoinPredicate p;
    private DbIterator[] children;
    
	private Tuple t1 = null;
	private Tuple t2 = null;


    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.p = p;
        children = new DbIterator[2];
        this.children[0] = child1;
        this.children[1] = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return p;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
        return children[0].getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
        return children[1].getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(children[0].getTupleDesc(), children[1].getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        children[0].open();
        children[1].open();
        nullify();
    }

    public void close() {
        super.close();
        children[0].close();
        children[1].close();
        nullify();
    }

    public void rewind() throws DbException, TransactionAbortedException {
    	children[0].rewind();
    	children[1].rewind();
    	nullify();
    }
    
    // Resets current tuple values
    private void nullify() {
    	t1 = null;
    	t2 = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p/>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p/>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	if (t1==null) {
    		if(children[0].hasNext()) {
    			t1 = children[0].next();
    		} else {
    			return null;
    		}
    	}
    	while(t1 != null) {
    		if(children[1].hasNext()) {
    			t2 = children[1].next();
    		} else {
    			return null;
    		}
    		while(!p.filter(t1, t2)) {
    			if(children[1].hasNext()) {
    				t2 = children[1].next();
    			} else {
    				break;
    			}
    		}
    		if(p.filter(t1, t2)) {
    			Tuple temp1 = t1;
    			Tuple temp2 = t2;
    			//System.out.println("Join " + t1 + " || " + t2);
    			if(!children[1].hasNext()) {
    				if(children[0].hasNext()) {
    					children[1].rewind();
    					t1 = children[0].next();
    				}
    			}
    			return merge(temp1,temp2);
    		}
    		if(children[0].hasNext()) {
    			t1 = children[0].next();
    			children[1].rewind();
    		} else {
    			t1 = null;
    		}
    	}
    	return null;
    }
    
    private Tuple merge(Tuple t1, Tuple t2) {
    	Tuple ret = new Tuple(getTupleDesc());
    	
    	for(int i=0;i<t1.getTupleDesc().numFields();i++) {
    		ret.setField(i, t1.getField(i));
    	}
    	for(int i=0;i<t2.getTupleDesc().numFields();i++) {
    		ret.setField(i+t1.getTupleDesc().numFields(), t2.getField(i));
    	}
    	return ret;
    }

    @Override
    public DbIterator[] getChildren() {
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        this.children = children;
    }
}